#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test_roulette_sm
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="RULETA")]
	public partial class RouletteDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertRoulette(Roulette instance);
    partial void UpdateRoulette(Roulette instance);
    partial void DeleteRoulette(Roulette instance);
    partial void Insertbets(bets instance);
    partial void Updatebets(bets instance);
    partial void Deletebets(bets instance);
    partial void InsertwinningNumbers(winningNumbers instance);
    partial void UpdatewinningNumbers(winningNumbers instance);
    partial void DeletewinningNumbers(winningNumbers instance);
    #endregion
		
		public RouletteDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RULETAConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RouletteDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RouletteDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RouletteDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RouletteDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Roulette> Roulette
		{
			get
			{
				return this.GetTable<Roulette>();
			}
		}
		
		public System.Data.Linq.Table<bets> bets
		{
			get
			{
				return this.GetTable<bets>();
			}
		}
		
		public System.Data.Linq.Table<winningNumbers> winningNumbers
		{
			get
			{
				return this.GetTable<winningNumbers>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roulette")]
	public partial class Roulette : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<bool> _isOpen;
		
		private System.Nullable<System.DateTime> _dateOpen;
		
		private System.Nullable<System.DateTime> _dateClose;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnisOpenChanging(System.Nullable<bool> value);
    partial void OnisOpenChanged();
    partial void OndateOpenChanging(System.Nullable<System.DateTime> value);
    partial void OndateOpenChanged();
    partial void OndateCloseChanging(System.Nullable<System.DateTime> value);
    partial void OndateCloseChanged();
    #endregion
		
		public Roulette()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isOpen", DbType="Bit")]
		public System.Nullable<bool> isOpen
		{
			get
			{
				return this._isOpen;
			}
			set
			{
				if ((this._isOpen != value))
				{
					this.OnisOpenChanging(value);
					this.SendPropertyChanging();
					this._isOpen = value;
					this.SendPropertyChanged("isOpen");
					this.OnisOpenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOpen", DbType="Date")]
		public System.Nullable<System.DateTime> dateOpen
		{
			get
			{
				return this._dateOpen;
			}
			set
			{
				if ((this._dateOpen != value))
				{
					this.OndateOpenChanging(value);
					this.SendPropertyChanging();
					this._dateOpen = value;
					this.SendPropertyChanged("dateOpen");
					this.OndateOpenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateClose", DbType="Date")]
		public System.Nullable<System.DateTime> dateClose
		{
			get
			{
				return this._dateClose;
			}
			set
			{
				if ((this._dateClose != value))
				{
					this.OndateCloseChanging(value);
					this.SendPropertyChanging();
					this._dateClose = value;
					this.SendPropertyChanged("dateClose");
					this.OndateCloseChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bets")]
	public partial class bets : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _id_roulette;
		
		private string _user_;
		
		private System.Nullable<int> _number;
		
		private System.Nullable<double> _money;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onid_rouletteChanging(System.Nullable<int> value);
    partial void Onid_rouletteChanged();
    partial void Onuser_Changing(string value);
    partial void Onuser_Changed();
    partial void OnnumberChanging(System.Nullable<int> value);
    partial void OnnumberChanged();
    partial void OnmoneyChanging(System.Nullable<double> value);
    partial void OnmoneyChanged();
    #endregion
		
		public bets()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_roulette", DbType="Int")]
		public System.Nullable<int> id_roulette
		{
			get
			{
				return this._id_roulette;
			}
			set
			{
				if ((this._id_roulette != value))
				{
					this.Onid_rouletteChanging(value);
					this.SendPropertyChanging();
					this._id_roulette = value;
					this.SendPropertyChanged("id_roulette");
					this.Onid_rouletteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_", DbType="VarChar(50)")]
		public string user_
		{
			get
			{
				return this._user_;
			}
			set
			{
				if ((this._user_ != value))
				{
					this.Onuser_Changing(value);
					this.SendPropertyChanging();
					this._user_ = value;
					this.SendPropertyChanged("user_");
					this.Onuser_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="Int")]
		public System.Nullable<int> number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_money", DbType="Float")]
		public System.Nullable<double> money
		{
			get
			{
				return this._money;
			}
			set
			{
				if ((this._money != value))
				{
					this.OnmoneyChanging(value);
					this.SendPropertyChanging();
					this._money = value;
					this.SendPropertyChanged("money");
					this.OnmoneyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.winningNumbers")]
	public partial class winningNumbers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _number;
		
		private int _id_roulette;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnumberChanging(int value);
    partial void OnnumberChanged();
    partial void Onid_rouletteChanging(int value);
    partial void Onid_rouletteChanged();
    #endregion
		
		public winningNumbers()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="Int NOT NULL")]
		public int number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_roulette", DbType="Int NOT NULL")]
		public int id_roulette
		{
			get
			{
				return this._id_roulette;
			}
			set
			{
				if ((this._id_roulette != value))
				{
					this.Onid_rouletteChanging(value);
					this.SendPropertyChanging();
					this._id_roulette = value;
					this.SendPropertyChanged("id_roulette");
					this.Onid_rouletteChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
